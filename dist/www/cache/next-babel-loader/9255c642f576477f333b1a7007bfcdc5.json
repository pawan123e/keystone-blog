{"ast":null,"code":"var _jsxFileName = \"E:\\\\web Developer Projects\\\\keystone_blog\\\\app\\\\pages\\\\post\\\\[slug].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useState } from 'react';\nimport { jsx } from '@emotion/core';\nimport { format, parseISO } from 'date-fns';\nimport Layout from '../../templates/layout';\nimport Header from '../../components/header';\nimport { Banner } from '../../components/banner';\nimport { withApollo } from '../../lib/apollo';\n/** @jsx jsx */\n\nconst ADD_COMMENT = gql`\n  mutation AddComment($body: String!, $postId: ID!, $posted: DateTime!) {\n    createComment(\n      data: { body: $body, originalPost: { connect: { id: $postId } }, posted: $posted }\n    ) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\nconst ALL_QUERIES = gql`\n  query AllQueries($slug: String) {\n    allPosts(where: { slug: $slug }) {\n      id\n      title\n      slug\n      body\n      posted\n      image {\n        publicUrl\n      }\n      author {\n        name\n      }\n    }\n\n    allComments(where: { originalPost: { slug: $slug } }) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\n\nconst imagePlaceholder = name => `data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width=\"100\" height=\"100\">\n<rect width=\"100\" height=\"100\" fill=\"hsl(200,20%,50%)\" />\n<text text-anchor=\"middle\" x=\"50\" y=\"67\" fill=\"white\" style=\"font-size: 50px; font-family: 'Rubik', sans-serif;\">\n${name.charAt(0)}</text></svg>`;\n\nconst Comments = ({\n  data\n}) => jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }\n}, jsx(\"h2\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }\n}, \"Comments\"), data.allComments.length ? data.allComments.map(comment => jsx(\"div\", {\n  key: comment.id,\n  css: {\n    marginBottom: 32,\n    display: 'flex',\n    alignItems: 'center'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 11\n  }\n}, jsx(\"img\", {\n  src: comment.author.avatar ? comment.author.avatar.publicUrl : imagePlaceholder(comment.author.name),\n  css: {\n    width: 48,\n    height: 48,\n    borderRadius: 32\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 13\n  }\n}), jsx(\"div\", {\n  css: {\n    marginLeft: 16\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 13\n  }\n}, jsx(\"p\", {\n  css: {\n    color: 'hsl(200,20%,50%)',\n    fontSize: '0.8em',\n    fontWeight: 800,\n    margin: '8px 0'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 15\n  }\n}, comment.author.name, \" on \", format(parseISO(comment.posted), 'dd MMM yyyy')), jsx(\"p\", {\n  css: {\n    margin: '8px 0'\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 15\n  }\n}, comment.body)))) : 'No comments yet');\n\nconst AddComments = ({\n  post\n}) => {\n  let {\n    0: comment,\n    1: setComment\n  } = useState('');\n  const {\n    data,\n    loading: userLoading,\n    error: userError\n  } = useQuery(gql`\n    query {\n      authenticatedUser {\n        id\n      }\n    }\n  `);\n  const [createComment, {\n    loading: savingComment,\n    error: saveError\n  }] = useMutation(ADD_COMMENT, {\n    refetchQueries: ['AllQueries']\n  });\n  const loggedIn = !userLoading && !!data.authenticatedUser;\n  const formDisabled = !loggedIn || savingComment;\n  const error = userError || saveError;\n  return jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Add new Comment\"), userLoading ? jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"loading...\") : jsx(React.Fragment, null, error && jsx(Banner, {\n    style: 'error',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Whoops!\"), \" Something has gone wrong\", jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }), error.message || userError.toString()), !loggedIn && jsx(Banner, {\n    style: 'error',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, jsx(\"a\", {\n    href: \"/signin\",\n    as: \"/signin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Sign In\"), ' ', \"to leave a comment.\"), jsx(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      createComment({\n        variables: {\n          body: comment,\n          postId: post.id,\n          posted: new Date()\n        }\n      });\n      setComment('');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, jsx(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Write a comment\",\n    name: \"comment\",\n    disabled: formDisabled,\n    css: {\n      padding: 12,\n      fontSize: 16,\n      width: '100%',\n      height: 60,\n      border: 0,\n      borderRadius: 6,\n      resize: 'none'\n    },\n    value: comment,\n    onChange: event => {\n      setComment(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    disabled: formDisabled,\n    css: {\n      padding: '6px 12px',\n      borderRadius: 6,\n      background: 'hsl(200, 20%, 50%)',\n      fontSize: '1em',\n      color: 'white',\n      border: 0,\n      marginTop: 6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst Render = ({\n  children\n}) => children();\n\nconst PostPage = withApollo(({\n  slug\n}) => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(ALL_QUERIES, {\n    variables: {\n      slug\n    }\n  });\n  return jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }), jsx(\"div\", {\n    css: {\n      margin: '48px 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, jsx(Link, {\n    href: \"/\",\n    passHref: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, jsx(\"a\", {\n    css: {\n      color: 'hsl(200,20%,50%)',\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, '< Go Back')), jsx(Render, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, () => {\n    if (loading) return jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 33\n      }\n    }, \"loading...\");\n    if (error) return jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 31\n      }\n    }, \"Error!\");\n    const post = data.allPosts && data.allPosts[0];\n    if (!post) return jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 31\n      }\n    }, \"404: Post not found\");\n    return jsx(React.Fragment, null, jsx(\"div\", {\n      css: {\n        background: 'white',\n        margin: '24px 0',\n        boxShadow: '0px 10px 20px hsla(200, 20%, 20%, 0.20)',\n        marginBottom: 32,\n        borderRadius: 6,\n        overflow: 'hidden'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }, jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, post.title)), post.image ? jsx(\"img\", {\n      src: post.image.publicUrl,\n      css: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 33\n      }\n    }) : null, jsx(\"article\", {\n      css: {\n        padding: '1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, jsx(\"h1\", {\n      css: {\n        marginTop: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, post.title), jsx(\"section\", {\n      dangerouslySetInnerHTML: {\n        __html: post.body\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: {\n        marginTop: '1em',\n        borderTop: '1px solid hsl(200, 20%, 80%)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, jsx(\"p\", {\n      css: {\n        fontSize: '0.8em',\n        marginBottom: 0,\n        color: 'hsl(200, 20%, 50%)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 23\n      }\n    }, \"Posted by \", post.author ? post.author.name : 'someone', \" on\", ' ', format(parseISO(post.posted), 'dd/MM/yyyy'))))), jsx(Comments, {\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }), jsx(AddComments, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }));\n  })));\n});\n\nPostPage.getInitialProps = ({\n  query: {\n    slug\n  }\n}) => ({\n  slug\n});\n\nexport default PostPage;","map":{"version":3,"sources":["E:/web Developer Projects/keystone_blog/app/pages/post/[slug].js"],"names":["Head","Link","gql","useMutation","useQuery","useState","jsx","format","parseISO","Layout","Header","Banner","withApollo","ADD_COMMENT","ALL_QUERIES","imagePlaceholder","name","charAt","Comments","data","allComments","length","map","comment","id","marginBottom","display","alignItems","author","avatar","publicUrl","width","height","borderRadius","marginLeft","color","fontSize","fontWeight","margin","posted","body","AddComments","post","setComment","loading","userLoading","error","userError","createComment","savingComment","saveError","refetchQueries","loggedIn","authenticatedUser","formDisabled","message","toString","e","preventDefault","variables","postId","Date","padding","border","resize","event","target","value","background","marginTop","Render","children","PostPage","slug","cursor","allPosts","boxShadow","overflow","title","image","__html","borderTop","getInitialProps","query"],"mappings":"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","sourcesContent":["import Head from 'next/head';\nimport Link from 'next/link';\n\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useState } from 'react';\n\nimport { jsx } from '@emotion/core';\nimport { format, parseISO } from 'date-fns';\n\nimport Layout from '../../templates/layout';\nimport Header from '../../components/header';\nimport { Banner } from '../../components/banner';\nimport { withApollo } from '../../lib/apollo';\n\n/** @jsx jsx */\n\nconst ADD_COMMENT = gql`\n  mutation AddComment($body: String!, $postId: ID!, $posted: DateTime!) {\n    createComment(\n      data: { body: $body, originalPost: { connect: { id: $postId } }, posted: $posted }\n    ) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\n\nconst ALL_QUERIES = gql`\n  query AllQueries($slug: String) {\n    allPosts(where: { slug: $slug }) {\n      id\n      title\n      slug\n      body\n      posted\n      image {\n        publicUrl\n      }\n      author {\n        name\n      }\n    }\n\n    allComments(where: { originalPost: { slug: $slug } }) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\n\nconst imagePlaceholder = name => `data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width=\"100\" height=\"100\">\n<rect width=\"100\" height=\"100\" fill=\"hsl(200,20%,50%)\" />\n<text text-anchor=\"middle\" x=\"50\" y=\"67\" fill=\"white\" style=\"font-size: 50px; font-family: 'Rubik', sans-serif;\">\n${name.charAt(0)}</text></svg>`;\n\nconst Comments = ({ data }) => (\n  <div>\n    <h2>Comments</h2>\n    {data.allComments.length\n      ? data.allComments.map(comment => (\n          <div\n            key={comment.id}\n            css={{\n              marginBottom: 32,\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <img\n              src={\n                comment.author.avatar\n                  ? comment.author.avatar.publicUrl\n                  : imagePlaceholder(comment.author.name)\n              }\n              css={{ width: 48, height: 48, borderRadius: 32 }}\n            />\n            <div css={{ marginLeft: 16 }}>\n              <p\n                css={{\n                  color: 'hsl(200,20%,50%)',\n                  fontSize: '0.8em',\n                  fontWeight: 800,\n                  margin: '8px 0',\n                }}\n              >\n                {comment.author.name} on {format(parseISO(comment.posted), 'dd MMM yyyy')}\n              </p>\n              <p css={{ margin: '8px 0' }}>{comment.body}</p>\n            </div>\n          </div>\n        ))\n      : 'No comments yet'}\n  </div>\n);\n\nconst AddComments = ({ post }) => {\n  let [comment, setComment] = useState('');\n\n  const { data, loading: userLoading, error: userError } = useQuery(gql`\n    query {\n      authenticatedUser {\n        id\n      }\n    }\n  `);\n\n  const [createComment, { loading: savingComment, error: saveError }] = useMutation(ADD_COMMENT, {\n    refetchQueries: ['AllQueries'],\n  });\n\n  const loggedIn = !userLoading && !!data.authenticatedUser;\n  const formDisabled = !loggedIn || savingComment;\n  const error = userError || saveError;\n\n  return (\n    <div>\n      <h2>Add new Comment</h2>\n\n      {userLoading ? (\n        <p>loading...</p>\n      ) : (\n        <>\n          {error && (\n            <Banner style={'error'}>\n              <strong>Whoops!</strong> Something has gone wrong\n              <br />\n              {error.message || userError.toString()}\n            </Banner>\n          )}\n          {!loggedIn && (\n            <Banner style={'error'}>\n              <a href=\"/signin\" as=\"/signin\">\n                Sign In\n              </a>{' '}\n              to leave a comment.\n            </Banner>\n          )}\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n\n              createComment({\n                variables: {\n                  body: comment,\n                  postId: post.id,\n                  posted: new Date(),\n                },\n              });\n\n              setComment('');\n            }}\n          >\n            <textarea\n              type=\"text\"\n              placeholder=\"Write a comment\"\n              name=\"comment\"\n              disabled={formDisabled}\n              css={{\n                padding: 12,\n                fontSize: 16,\n                width: '100%',\n                height: 60,\n                border: 0,\n                borderRadius: 6,\n                resize: 'none',\n              }}\n              value={comment}\n              onChange={event => {\n                setComment(event.target.value);\n              }}\n            />\n\n            <input\n              type=\"submit\"\n              value=\"Submit\"\n              disabled={formDisabled}\n              css={{\n                padding: '6px 12px',\n                borderRadius: 6,\n                background: 'hsl(200, 20%, 50%)',\n                fontSize: '1em',\n                color: 'white',\n                border: 0,\n                marginTop: 6,\n              }}\n            />\n          </form>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst Render = ({ children }) => children();\n\nconst PostPage = withApollo(({ slug }) => {\n  const { data, loading, error } = useQuery(ALL_QUERIES, { variables: { slug } });\n\n  return (\n    <Layout>\n      <Header />\n      <div css={{ margin: '48px 0' }}>\n        <Link href=\"/\" passHref>\n          <a css={{ color: 'hsl(200,20%,50%)', cursor: 'pointer' }}>{'< Go Back'}</a>\n        </Link>\n\n        <Render>\n          {() => {\n            if (loading) return <p>loading...</p>;\n            if (error) return <p>Error!</p>;\n\n            const post = data.allPosts && data.allPosts[0];\n\n            if (!post) return <p>404: Post not found</p>;\n\n            return (\n              <>\n                <div\n                  css={{\n                    background: 'white',\n                    margin: '24px 0',\n                    boxShadow: '0px 10px 20px hsla(200, 20%, 20%, 0.20)',\n                    marginBottom: 32,\n                    borderRadius: 6,\n                    overflow: 'hidden',\n                  }}\n                >\n                  <Head>\n                    <title>{post.title}</title>\n                  </Head>\n                  {post.image ? <img src={post.image.publicUrl} css={{ width: '100%' }} /> : null}\n                  <article css={{ padding: '1em' }}>\n                    <h1 css={{ marginTop: 0 }}>{post.title}</h1>\n                    <section dangerouslySetInnerHTML={{ __html: post.body }} />\n                    <div css={{ marginTop: '1em', borderTop: '1px solid hsl(200, 20%, 80%)' }}>\n                      <p css={{ fontSize: '0.8em', marginBottom: 0, color: 'hsl(200, 20%, 50%)' }}>\n                        Posted by {post.author ? post.author.name : 'someone'} on{' '}\n                        {format(parseISO(post.posted), 'dd/MM/yyyy')}\n                      </p>\n                    </div>\n                  </article>\n                </div>\n\n                <Comments data={data} />\n\n                <AddComments post={post} />\n              </>\n            );\n          }}\n        </Render>\n      </div>\n    </Layout>\n  );\n});\n\nPostPage.getInitialProps = ({ query: { slug } }) => ({ slug });\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}