{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\web Developer Projects\\\\keystone_blog\\\\app\\\\lib\\\\apollo.js\";\n\nvar __jsx = React.createElement;\n// Derived from https://github.com/zeit/next.js/tree/2789e7e0c25c72fbf6be3ef070e530186af14430/examples/with-apollo\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient'; // On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\n\nvar globalApolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\n\nvar initApolloClient = function initApolloClient(initialState, ctx) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (false) {\n    return createApolloClient(initialState, ctx);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\n\n\nexport var withApollo = function withApollo(PageComponent) {\n  var WithApollo = function WithApollo(_ref) {\n    var apolloClient = _ref.apolloClient,\n        apolloState = _ref.apolloState,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    var client;\n\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return __jsx(ApolloProvider, {\n      client: client,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    var displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  return WithApollo;\n};","map":{"version":3,"sources":["E:/web Developer Projects/keystone_blog/app/lib/apollo.js"],"names":["React","ApolloProvider","createApolloClient","globalApolloClient","initApolloClient","initialState","ctx","withApollo","PageComponent","WithApollo","apolloClient","apolloState","pageProps","client","undefined","displayName","name"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,kBAAP,MAA+B,iBAA/B,C,CAEA;AACA;;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AAEA;;;;;;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD,EAAeC,GAAf,EAAuB;AAC9C;AACA;AACA,aAAmC;AACjC,WAAOJ,kBAAkB,CAACG,YAAD,EAAeC,GAAf,CAAzB;AACD,GAL6C,CAO9C;;;AACA,MAAI,CAACH,kBAAL,EAAyB;AACvBA,IAAAA,kBAAkB,GAAGD,kBAAkB,CAACG,YAAD,EAAeC,GAAf,CAAvC;AACD;;AAED,SAAOH,kBAAP;AACD,CAbD;AAeA;;;;;;;;AAMA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAAC,aAAa,EAAI;AACzC,MAAMC,UAAU,GAAG,SAAbA,UAAa,OAAiD;AAAA,QAA9CC,YAA8C,QAA9CA,YAA8C;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAhBC,SAAgB;;AAClE,QAAIC,MAAJ;;AACA,QAAIH,YAAJ,EAAkB;AAChB;AACAG,MAAAA,MAAM,GAAGH,YAAT;AACD,KAHD,MAGO;AACL;AACAG,MAAAA,MAAM,GAAGT,gBAAgB,CAACO,WAAD,EAAcG,SAAd,CAAzB;AACD;;AAED,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD,eAAmBD,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GAfD,CADyC,CAkBzC;;;AACA,YAA2C;AACzC,QAAMG,WAAW,GAAGP,aAAa,CAACO,WAAd,IAA6BP,aAAa,CAACQ,IAA3C,IAAmD,WAAvE;AACAP,IAAAA,UAAU,CAACM,WAAX,wBAAuCA,WAAvC;AACD;;AAED,SAAON,UAAP;AACD,CAzBM","sourcesContent":["// Derived from https://github.com/zeit/next.js/tree/2789e7e0c25c72fbf6be3ef070e530186af14430/examples/with-apollo\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport createApolloClient from '../apolloClient';\n\n// On the client, we store the Apollo Client in the following variable.\n// This prevents the client from reinitializing between page transitions.\nlet globalApolloClient = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {NormalizedCacheObject} initialState\n * @param  {NextPageContext} ctx\n */\nconst initApolloClient = (initialState, ctx) => {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState, ctx);\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState, ctx);\n  }\n\n  return globalApolloClient;\n};\n\n/**\n * Creates a withApollo HOC\n * that provides the apolloContext\n * to a next.js Page or AppTree.\n * @returns {(PageComponent: ReactNode) => ReactNode}\n */\nexport const withApollo = PageComponent => {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    let client;\n    if (apolloClient) {\n      // Happens on: getDataFromTree & next.js ssr\n      client = apolloClient;\n    } else {\n      // Happens on: next.js csr\n      client = initApolloClient(apolloState, undefined);\n    }\n\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  return WithApollo;\n};\n"]},"metadata":{},"sourceType":"module"}