{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\web Developer Projects\\\\keystone_blog\\\\app\\\\pages\\\\post\\\\[slug].js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      authenticatedUser {\\n        id\\n      }\\n    }\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query AllQueries($slug: String) {\\n    allPosts(where: { slug: $slug }) {\\n      id\\n      title\\n      slug\\n      body\\n      posted\\n      image {\\n        publicUrl\\n      }\\n      author {\\n        name\\n      }\\n    }\\n\\n    allComments(where: { originalPost: { slug: $slug } }) {\\n      id\\n      body\\n      author {\\n        name\\n        avatar {\\n          publicUrl\\n        }\\n      }\\n      posted\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation AddComment($body: String!, $postId: ID!, $posted: DateTime!) {\\n    createComment(\\n      data: { body: $body, originalPost: { connect: { id: $postId } }, posted: $posted }\\n    ) {\\n      id\\n      body\\n      author {\\n        name\\n        avatar {\\n          publicUrl\\n        }\\n      }\\n      posted\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useState } from 'react';\nimport { jsx } from '@emotion/core';\nimport { format, parseISO } from 'date-fns';\nimport Layout from '../../templates/layout';\nimport Header from '../../components/header';\nimport { Banner } from '../../components/banner';\nimport { withApollo } from '../../lib/apollo';\n/** @jsx jsx */\n\nvar ADD_COMMENT = gql(_templateObject());\nvar ALL_QUERIES = gql(_templateObject2());\n\nvar imagePlaceholder = function imagePlaceholder(name) {\n  return \"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width=\\\"100\\\" height=\\\"100\\\">\\n<rect width=\\\"100\\\" height=\\\"100\\\" fill=\\\"hsl(200,20%,50%)\\\" />\\n<text text-anchor=\\\"middle\\\" x=\\\"50\\\" y=\\\"67\\\" fill=\\\"white\\\" style=\\\"font-size: 50px; font-family: 'Rubik', sans-serif;\\\">\\n\".concat(name.charAt(0), \"</text></svg>\");\n};\n\nvar Comments = function Comments(_ref) {\n  var data = _ref.data;\n  return jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }\n  }, jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, \"Comments\"), data.allComments.length ? data.allComments.map(function (comment) {\n    return jsx(\"div\", {\n      key: comment.id,\n      css: {\n        marginBottom: 32,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, jsx(\"img\", {\n      src: comment.author.avatar ? comment.author.avatar.publicUrl : imagePlaceholder(comment.author.name),\n      css: {\n        width: 48,\n        height: 48,\n        borderRadius: 32\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }), jsx(\"div\", {\n      css: {\n        marginLeft: 16\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, jsx(\"p\", {\n      css: {\n        color: 'hsl(200,20%,50%)',\n        fontSize: '0.8em',\n        fontWeight: 800,\n        margin: '8px 0'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, comment.author.name, \" on \", format(parseISO(comment.posted), 'dd MMM yyyy')), jsx(\"p\", {\n      css: {\n        margin: '8px 0'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, comment.body)));\n  }) : 'No comments yet');\n};\n\n_c = Comments;\n\nvar AddComments = function AddComments(_ref2) {\n  _s();\n\n  var post = _ref2.post;\n\n  var _useState = useState(''),\n      comment = _useState[0],\n      setComment = _useState[1];\n\n  var _useQuery = useQuery(gql(_templateObject3())),\n      data = _useQuery.data,\n      userLoading = _useQuery.loading,\n      userError = _useQuery.error;\n\n  var _useMutation = useMutation(ADD_COMMENT, {\n    refetchQueries: ['AllQueries']\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createComment = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      savingComment = _useMutation2$.loading,\n      saveError = _useMutation2$.error;\n\n  var loggedIn = !userLoading && !!data.authenticatedUser;\n  var formDisabled = !loggedIn || savingComment;\n  var error = userError || saveError;\n  return jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Add new Comment\"), userLoading ? jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"loading...\") : jsx(React.Fragment, null, error && jsx(Banner, {\n    style: 'error',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, jsx(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Whoops!\"), \" Something has gone wrong\", jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }), error.message || userError.toString()), !loggedIn && jsx(Banner, {\n    style: 'error',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, jsx(\"a\", {\n    href: \"/signin\",\n    as: \"/signin\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Sign In\"), ' ', \"to leave a comment.\"), jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n      createComment({\n        variables: {\n          body: comment,\n          postId: post.id,\n          posted: new Date()\n        }\n      });\n      setComment('');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, jsx(\"textarea\", {\n    type: \"text\",\n    placeholder: \"Write a comment\",\n    name: \"comment\",\n    disabled: formDisabled,\n    css: {\n      padding: 12,\n      fontSize: 16,\n      width: '100%',\n      height: 60,\n      border: 0,\n      borderRadius: 6,\n      resize: 'none'\n    },\n    value: comment,\n    onChange: function onChange(event) {\n      setComment(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }), jsx(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    disabled: formDisabled,\n    css: {\n      padding: '6px 12px',\n      borderRadius: 6,\n      background: 'hsl(200, 20%, 50%)',\n      fontSize: '1em',\n      color: 'white',\n      border: 0,\n      marginTop: 6\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }))));\n};\n\n_s(AddComments, \"9Cl25mLmXZ42iGnxYRy2+x04VUg=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c2 = AddComments;\n\nvar Render = function Render(_ref3) {\n  var children = _ref3.children;\n  return children();\n};\n\n_c3 = Render;\nvar PostPage = withApollo(_c4 = _s2(function (_ref4) {\n  _s2();\n\n  var slug = _ref4.slug;\n\n  var _useQuery2 = useQuery(ALL_QUERIES, {\n    variables: {\n      slug: slug\n    }\n  }),\n      data = _useQuery2.data,\n      loading = _useQuery2.loading,\n      error = _useQuery2.error;\n\n  return jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }), jsx(\"div\", {\n    css: {\n      margin: '48px 0'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, jsx(Link, {\n    href: \"/\",\n    passHref: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, jsx(\"a\", {\n    css: {\n      color: 'hsl(200,20%,50%)',\n      cursor: 'pointer'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, '< Go Back')), jsx(Render, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, function () {\n    if (loading) return jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 33\n      }\n    }, \"loading...\");\n    if (error) return jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 31\n      }\n    }, \"Error!\");\n    var post = data.allPosts && data.allPosts[0];\n    if (!post) return jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 31\n      }\n    }, \"404: Post not found\");\n    return jsx(React.Fragment, null, jsx(\"div\", {\n      css: {\n        background: 'white',\n        margin: '24px 0',\n        boxShadow: '0px 10px 20px hsla(200, 20%, 20%, 0.20)',\n        marginBottom: 32,\n        borderRadius: 6,\n        overflow: 'hidden'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, jsx(Head, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }, jsx(\"title\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, post.title)), post.image ? jsx(\"img\", {\n      src: post.image.publicUrl,\n      css: {\n        width: '100%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 33\n      }\n    }) : null, jsx(\"article\", {\n      css: {\n        padding: '1em'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, jsx(\"h1\", {\n      css: {\n        marginTop: 0\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }\n    }, post.title), jsx(\"section\", {\n      dangerouslySetInnerHTML: {\n        __html: post.body\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }\n    }), jsx(\"div\", {\n      css: {\n        marginTop: '1em',\n        borderTop: '1px solid hsl(200, 20%, 80%)'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, jsx(\"p\", {\n      css: {\n        fontSize: '0.8em',\n        marginBottom: 0,\n        color: 'hsl(200, 20%, 50%)'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 23\n      }\n    }, \"Posted by \", post.author ? post.author.name : 'someone', \" on\", ' ', format(parseISO(post.posted), 'dd/MM/yyyy'))))), jsx(Comments, {\n      data: data,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }), jsx(AddComments, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }));\n  })));\n}, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n}));\n_c5 = PostPage;\n\nPostPage.getInitialProps = function (_ref5) {\n  var slug = _ref5.query.slug;\n  return {\n    slug: slug\n  };\n};\n\nexport default PostPage;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Comments\");\n$RefreshReg$(_c2, \"AddComments\");\n$RefreshReg$(_c3, \"Render\");\n$RefreshReg$(_c4, \"PostPage$withApollo\");\n$RefreshReg$(_c5, \"PostPage\");","map":{"version":3,"sources":["E:/web Developer Projects/keystone_blog/app/pages/post/[slug].js"],"names":["Head","Link","gql","useMutation","useQuery","useState","jsx","format","parseISO","Layout","Header","Banner","withApollo","ADD_COMMENT","ALL_QUERIES","imagePlaceholder","name","charAt","Comments","data","allComments","length","map","comment","id","marginBottom","display","alignItems","author","avatar","publicUrl","width","height","borderRadius","marginLeft","color","fontSize","fontWeight","margin","posted","body","AddComments","post","setComment","userLoading","loading","userError","error","refetchQueries","createComment","savingComment","saveError","loggedIn","authenticatedUser","formDisabled","message","toString","e","preventDefault","variables","postId","Date","padding","border","resize","event","target","value","background","marginTop","Render","children","PostPage","slug","cursor","allPosts","boxShadow","overflow","title","image","__html","borderTop","getInitialProps","query"],"mappings":"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","sourcesContent":["import Head from 'next/head';\nimport Link from 'next/link';\n\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { useState } from 'react';\n\nimport { jsx } from '@emotion/core';\nimport { format, parseISO } from 'date-fns';\n\nimport Layout from '../../templates/layout';\nimport Header from '../../components/header';\nimport { Banner } from '../../components/banner';\nimport { withApollo } from '../../lib/apollo';\n\n/** @jsx jsx */\n\nconst ADD_COMMENT = gql`\n  mutation AddComment($body: String!, $postId: ID!, $posted: DateTime!) {\n    createComment(\n      data: { body: $body, originalPost: { connect: { id: $postId } }, posted: $posted }\n    ) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\n\nconst ALL_QUERIES = gql`\n  query AllQueries($slug: String) {\n    allPosts(where: { slug: $slug }) {\n      id\n      title\n      slug\n      body\n      posted\n      image {\n        publicUrl\n      }\n      author {\n        name\n      }\n    }\n\n    allComments(where: { originalPost: { slug: $slug } }) {\n      id\n      body\n      author {\n        name\n        avatar {\n          publicUrl\n        }\n      }\n      posted\n    }\n  }\n`;\n\nconst imagePlaceholder = name => `data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width=\"100\" height=\"100\">\n<rect width=\"100\" height=\"100\" fill=\"hsl(200,20%,50%)\" />\n<text text-anchor=\"middle\" x=\"50\" y=\"67\" fill=\"white\" style=\"font-size: 50px; font-family: 'Rubik', sans-serif;\">\n${name.charAt(0)}</text></svg>`;\n\nconst Comments = ({ data }) => (\n  <div>\n    <h2>Comments</h2>\n    {data.allComments.length\n      ? data.allComments.map(comment => (\n          <div\n            key={comment.id}\n            css={{\n              marginBottom: 32,\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          >\n            <img\n              src={\n                comment.author.avatar\n                  ? comment.author.avatar.publicUrl\n                  : imagePlaceholder(comment.author.name)\n              }\n              css={{ width: 48, height: 48, borderRadius: 32 }}\n            />\n            <div css={{ marginLeft: 16 }}>\n              <p\n                css={{\n                  color: 'hsl(200,20%,50%)',\n                  fontSize: '0.8em',\n                  fontWeight: 800,\n                  margin: '8px 0',\n                }}\n              >\n                {comment.author.name} on {format(parseISO(comment.posted), 'dd MMM yyyy')}\n              </p>\n              <p css={{ margin: '8px 0' }}>{comment.body}</p>\n            </div>\n          </div>\n        ))\n      : 'No comments yet'}\n  </div>\n);\n\nconst AddComments = ({ post }) => {\n  let [comment, setComment] = useState('');\n\n  const { data, loading: userLoading, error: userError } = useQuery(gql`\n    query {\n      authenticatedUser {\n        id\n      }\n    }\n  `);\n\n  const [createComment, { loading: savingComment, error: saveError }] = useMutation(ADD_COMMENT, {\n    refetchQueries: ['AllQueries'],\n  });\n\n  const loggedIn = !userLoading && !!data.authenticatedUser;\n  const formDisabled = !loggedIn || savingComment;\n  const error = userError || saveError;\n\n  return (\n    <div>\n      <h2>Add new Comment</h2>\n\n      {userLoading ? (\n        <p>loading...</p>\n      ) : (\n        <>\n          {error && (\n            <Banner style={'error'}>\n              <strong>Whoops!</strong> Something has gone wrong\n              <br />\n              {error.message || userError.toString()}\n            </Banner>\n          )}\n          {!loggedIn && (\n            <Banner style={'error'}>\n              <a href=\"/signin\" as=\"/signin\">\n                Sign In\n              </a>{' '}\n              to leave a comment.\n            </Banner>\n          )}\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n\n              createComment({\n                variables: {\n                  body: comment,\n                  postId: post.id,\n                  posted: new Date(),\n                },\n              });\n\n              setComment('');\n            }}\n          >\n            <textarea\n              type=\"text\"\n              placeholder=\"Write a comment\"\n              name=\"comment\"\n              disabled={formDisabled}\n              css={{\n                padding: 12,\n                fontSize: 16,\n                width: '100%',\n                height: 60,\n                border: 0,\n                borderRadius: 6,\n                resize: 'none',\n              }}\n              value={comment}\n              onChange={event => {\n                setComment(event.target.value);\n              }}\n            />\n\n            <input\n              type=\"submit\"\n              value=\"Submit\"\n              disabled={formDisabled}\n              css={{\n                padding: '6px 12px',\n                borderRadius: 6,\n                background: 'hsl(200, 20%, 50%)',\n                fontSize: '1em',\n                color: 'white',\n                border: 0,\n                marginTop: 6,\n              }}\n            />\n          </form>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst Render = ({ children }) => children();\n\nconst PostPage = withApollo(({ slug }) => {\n  const { data, loading, error } = useQuery(ALL_QUERIES, { variables: { slug } });\n\n  return (\n    <Layout>\n      <Header />\n      <div css={{ margin: '48px 0' }}>\n        <Link href=\"/\" passHref>\n          <a css={{ color: 'hsl(200,20%,50%)', cursor: 'pointer' }}>{'< Go Back'}</a>\n        </Link>\n\n        <Render>\n          {() => {\n            if (loading) return <p>loading...</p>;\n            if (error) return <p>Error!</p>;\n\n            const post = data.allPosts && data.allPosts[0];\n\n            if (!post) return <p>404: Post not found</p>;\n\n            return (\n              <>\n                <div\n                  css={{\n                    background: 'white',\n                    margin: '24px 0',\n                    boxShadow: '0px 10px 20px hsla(200, 20%, 20%, 0.20)',\n                    marginBottom: 32,\n                    borderRadius: 6,\n                    overflow: 'hidden',\n                  }}\n                >\n                  <Head>\n                    <title>{post.title}</title>\n                  </Head>\n                  {post.image ? <img src={post.image.publicUrl} css={{ width: '100%' }} /> : null}\n                  <article css={{ padding: '1em' }}>\n                    <h1 css={{ marginTop: 0 }}>{post.title}</h1>\n                    <section dangerouslySetInnerHTML={{ __html: post.body }} />\n                    <div css={{ marginTop: '1em', borderTop: '1px solid hsl(200, 20%, 80%)' }}>\n                      <p css={{ fontSize: '0.8em', marginBottom: 0, color: 'hsl(200, 20%, 50%)' }}>\n                        Posted by {post.author ? post.author.name : 'someone'} on{' '}\n                        {format(parseISO(post.posted), 'dd/MM/yyyy')}\n                      </p>\n                    </div>\n                  </article>\n                </div>\n\n                <Comments data={data} />\n\n                <AddComments post={post} />\n              </>\n            );\n          }}\n        </Render>\n      </div>\n    </Layout>\n  );\n});\n\nPostPage.getInitialProps = ({ query: { slug } }) => ({ slug });\n\nexport default PostPage;\n"]},"metadata":{},"sourceType":"module"}